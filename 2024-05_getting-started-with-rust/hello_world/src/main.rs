//! Code comes from the following tutorials:
//!
//! * [Getting Started with Rust](https://rustmeup.com/tutorials/getting-started-with-rust)
//! * [Linting in Rust with Clippy](https://blog.logrocket.com/rust-linting-clippy/)
//!
//! Within `main`, the individual examples are put into separate functions,
//! instead of following the tutorial replacing main each time.
//! Each function documents where the code came from.
//!
//! Additional sources:
//!
//! * [Rust By Example](https://doc.rust-lang.org/rust-by-example/meta/doc.html)
//! * [Rust Programming Language Guide](https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments)
//! * [Rust API Guidelines](https://rust-lang.github.io/api-guidelines/naming.html)

/// Runs code from several tutorials.
/// See crate documentation.
fn main() {
    // Generated by default using `cargo new hello_world`
    println!("Hello, world!");

    variables_and_data_types();

    println!("Summation result is: {}", clippy_unnecessary_return(3, 7));

    control_structures();
}

/// Demonstrates the use of clippy with an unnecessary return statement.
/// ([Linting in Rust with Clippy](https://blog.logrocket.com/rust-linting-clippy/))
fn clippy_unnecessary_return(x: i32, y: i32) -> i32 {
    #[allow(clippy::needless_return)]
    return x + y;
}

/// Understanding the Basics of Rust: Variables and Data Types
/// ([Getting Started with Rust](https://rustmeup.com/tutorials/getting-started-with-rust))
fn variables_and_data_types() {
    let x = 5;  // i32 by default
    let f: f64 = 6.0;  // floating point number
    let t = true;  // boolean
    println!("x = {}, f = {}, t = {}", x, f, t);
}

/// Understanding the Basics of Rust: Control Structures
/// ([Getting Started with Rust](https://rustmeup.com/tutorials/getting-started-with-rust))
fn control_structures() {
    let x = 10;

    if x > 5 {
        println!("x is greater than 5");
    } else {
        println!("x is not greater than 5");
    }

    for i in 1..10 {
        println!("i = {}", i);
    }
}
